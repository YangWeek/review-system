// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q       = new(Query)
	Book    *book
	Course  *course
	Product *product
	Score   *score
	Student *student
	Teacher *teacher
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Book = &Q.Book
	Course = &Q.Course
	Product = &Q.Product
	Score = &Q.Score
	Student = &Q.Student
	Teacher = &Q.Teacher
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:      db,
		Book:    newBook(db, opts...),
		Course:  newCourse(db, opts...),
		Product: newProduct(db, opts...),
		Score:   newScore(db, opts...),
		Student: newStudent(db, opts...),
		Teacher: newTeacher(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Book    book
	Course  course
	Product product
	Score   score
	Student student
	Teacher teacher
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Book:    q.Book.clone(db),
		Course:  q.Course.clone(db),
		Product: q.Product.clone(db),
		Score:   q.Score.clone(db),
		Student: q.Student.clone(db),
		Teacher: q.Teacher.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:      db,
		Book:    q.Book.replaceDB(db),
		Course:  q.Course.replaceDB(db),
		Product: q.Product.replaceDB(db),
		Score:   q.Score.replaceDB(db),
		Student: q.Student.replaceDB(db),
		Teacher: q.Teacher.replaceDB(db),
	}
}

type queryCtx struct {
	Book    IBookDo
	Course  ICourseDo
	Product IProductDo
	Score   IScoreDo
	Student IStudentDo
	Teacher ITeacherDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Book:    q.Book.WithContext(ctx),
		Course:  q.Course.WithContext(ctx),
		Product: q.Product.WithContext(ctx),
		Score:   q.Score.WithContext(ctx),
		Student: q.Student.WithContext(ctx),
		Teacher: q.Teacher.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
